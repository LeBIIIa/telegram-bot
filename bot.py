
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import os
import psycopg2

# Stages
NAME, AGE, CITY = range(3)

# Env vars
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
DB_URL = os.getenv("DATABASE_URL")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return AGE

    context.user_data['age'] = age

    if age < 16:
        await update.message.reply_text(
            "–í–∏–±–∞—á, –∞–ª–µ —Ç–∏ –Ω–µ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è. –ü—Ä–æ—Ç–µ —É –Ω–∞—Å —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ ‚Äî –∑–∞—Ä–æ–±–ª—è–π, –∑–∞–ø—Ä–æ—à—É—é—á–∏ —ñ–Ω—à–∏—Ö!"
        )
        return ConversationHandler.END

    await update.message.reply_text("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?")
    return CITY

async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text
    user_data = context.user_data
    telegram_id = update.message.from_user.id

    # Save to DB
    try:
        conn = psycopg2.connect(DB_URL)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO applicants (name, age, city, telegram_id) VALUES (%s, %s, %s, %s)",
            (user_data['name'], user_data['age'], user_data['city'], telegram_id)
        )
        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")
        return ConversationHandler.END

    summary = f"""‚úÖ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:
–Ü–º'—è: {user_data['name']}
–í—ñ–∫: {user_data['age']}
–ú—ñ—Å—Ç–æ: {user_data['city']}
Telegram ID: {telegram_id}"""

    await context.bot.send_message(chat_id=ADMIN_ID, text=summary)
    await update.message.reply_text("üì® –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return ConversationHandler.END

async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        lines = update.message.reply_to_message.text.splitlines()
        for line in lines:
            if "Telegram ID:" in line:
                user_id = int(line.split(":")[1].strip())
                await context.bot.send_message(chat_id=user_id, text=update.message.text)
                await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
                return
    await update.message.reply_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.REPLY & filters.User(ADMIN_ID), admin_reply))

    app.run_polling()
