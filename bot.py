
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import os
import psycopg2

# Stages
NAME, AGE, CITY, PHONE = range(4)

# Env vars
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
DB_URL = os.getenv("DATABASE_URL")

def ensure_table():
    conn = psycopg2.connect(DB_URL)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS applicants (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            age INTEGER NOT NULL,
            city TEXT NOT NULL,
            telegram_id BIGINT NOT NULL,
            username TEXT,
            phone TEXT,
            status TEXT DEFAULT 'New'
        )
    """)
    conn.commit()
    cur.close()
    conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    return AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        return AGE

    context.user_data['age'] = age

    if age < 16:
        await update.message.reply_text(
            "–í–∏–±–∞—á, –∞–ª–µ —Ç–∏ –Ω–µ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è. –ü—Ä–æ—Ç–µ —É –Ω–∞—Å —î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ ‚Äî –∑–∞—Ä–æ–±–ª—è–π, –∑–∞–ø—Ä–æ—à—É—é—á–∏ —ñ–Ω—à–∏—Ö!"
        )
        return ConversationHandler.END

    await update.message.reply_text("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?")
    return CITY

async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text
    keyboard = [[{"text": "üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º", "request_contact": True}]]
    await update.message.reply_text("üì± –•–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É.")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    telegram_id = update.message.from_user.id
    username = update.message.from_user.username
    phone = None

    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text

    name = user_data['name']
    age = user_data['age']
    city = user_data['city']

    try:
        conn = psycopg2.connect(DB_URL)
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO applicants (name, age, city, telegram_id, username, phone) VALUES (%s, %s, %s, %s, %s, %s)",
            (name, age, city, telegram_id, username, phone)
        )
        conn.commit()
        cur.close()
        conn.close()
    except Exception:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.")
        return ConversationHandler.END

    link = f"https://t.me/{username}" if username else "‚ùå –ù–µ–º–∞—î username"
    summary = (
        f"‚úÖ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:\n"
        f"üë§ –Ü–º'—è: {name}\n"
        f"üéÇ –í—ñ–∫: {age}\n"
        f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {city}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone if phone else '–Ω–µ –Ω–∞–¥–∞–Ω–æ'}\n"
        f"üîó Username: @{username if username else '–Ω–µ–º–∞—î'}\n"
        f"üí¨ –ü—Ä–æ—Ñ—ñ–ª—å: {link}\n"
        f"üÜî Telegram ID: {telegram_id}"
    )

    await context.bot.send_message(chat_id=ADMIN_ID, text=summary)
    await update.message.reply_text("üì® –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –û—á—ñ–∫—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    return ConversationHandler.END

async def forward_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message:
        lines = update.message.reply_to_message.text.splitlines()
        for line in lines:
            if "Telegram ID:" in line:
                user_id = int(line.split(":")[1].strip())

                # Update status to In Progress
                try:
                    conn = psycopg2.connect(DB_URL)
                    cur = conn.cursor()
                    cur.execute("UPDATE applicants SET status = %s WHERE telegram_id = %s", ("In Progress", user_id))
                    conn.commit()
                    cur.close()
                    conn.close()
                except Exception:
                    pass

                if update.message.voice:
                    await context.bot.send_voice(chat_id=user_id, voice=update.message.voice.file_id)
                elif update.message.text:
                    await context.bot.send_message(chat_id=user_id, text=update.message.text)

                await update.message.reply_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. –°—Ç–∞—Ç—É—Å: In Progress.")
                return
    await update.message.reply_text("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏, –∫–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–æ–∑–º–æ–≤—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

if __name__ == '__main__':
    ensure_table()
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            PHONE: [MessageHandler(filters.ALL & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.REPLY & filters.ChatType.GROUPS, forward_reply))

    app.run_polling()
